;;**********************************************************************
;;
;; Title:       Base64.dbl
;;
;; Type:        Subroutine & Function
;;
;; Description: Converts data to Base64, returning either a memory
;;              handle (subroutine) or an alpha string (function).
;;
;; Author:      Tod Phillips, Synergex Professional Services Group
;;
;; Copyright:   ©Synergex International Inc.  All rights reserved.
;;
;; WARNING:     If you were given this code by a Synergex employee then
;;              you may use and modify it freely for use within your
;;              applications.
;;
;;              However, you may not under any circumstances distribute
;;              this code, or any modified version of this code, to any
;;              third party without first obtaining written permission to
;;              do so from Synergex.  In using this code you accept that it
;;              is provided as is, and without support or warranty.
;;
;;              Neither Synergex or the author accept any responsibility
;;              for any losses or damages of any nature which may arise
;;              from the use of this code.  This header information must
;;              remain unaltered in the code at all times.  Possession of
;;              this code, or any modified version of this code, indicates
;;              your acceptance of these terms.
;;
;; Revision:    1.0
;;
;; Date:        1/22/2009
;;**********************************************************************

;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;   Returns an alpha containing a base64-encoded string

.ifdef DBLv9
function base64_encode ,a
    req in  a_input             ,a  ; String to be encoded
    opt out a_length            ,n  ; Length of encoded string
    opt in  a_encoding          ,n  ; Encoding style
    opt in  a_ignoreTrailing    ,n  ; Pass as non-zero to ignore trailing spaces
    endparams
.else
function base64_encode
    a_input             ,a  ; String to be encoded
    a_length            ,n  ; Length of encoded string
    a_encoding          ,n  ; Encoding style
    a_ignoreTrailing    ,n  ; Pass as non-zero to ignore trailing spaces
.endc ;DBLv9

.align
    record
        outLength           ,i4
        outHdl              ,D_HANDLE

proc

    outHdl = %mem_proc(DM_ALLOC|DM_NULL, 1)

    xcall base64encode(a_input, outHdl, outLength, a_encoding, a_ignoreTrailing)

    if(^passed(a_length))
        a_length = outLength

    freturn ^m(outHdl)

.ifdef DBLv9
endfunction
.else
end
.endc ;DBLv9

;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;   Returns a memory handle containing base64-encoded string

.ifdef DBLv9
subroutine base64encode
    req in mismatch a_input     ,a  ; String (or handle) to be encoded
    req inout       a_hdl       ,i  ; Handle
    opt out a_length            ,n  ; Length of encoded string
    opt in  a_encoding          ,n  ; Encoding style
    opt in  a_ignoreTrailing    ,n  ; Pass as non-zero to ignore trailing spaces
    endparams
.else
subroutine base64encode
    a_input             ,a  ; String (or handle) to be encoded
    a_hdl               ,i  ; Handle
    a_length            ,n  ; Length of encoded string
    a_encoding          ,n  ; 0=None, 1=Mime Encoding style
    a_ignoreTrailing    ,n  ; Pass as non-zero to ignore trailing spaces
.endc ;DBLv9

.align
    stack record iVars
        b64ctr          ,i4
        b64LineLength   ,i4
        base64Chars     ,i4
        binVal          ,i4
        byteCtr         ,i4
        ctr             ,i4
        inHdl           ,D_HANDLE
        inLength        ,i4
        lastSetOf3      ,i4
        lineBreaksNeeded,i4
        outLength       ,i4
        setsOf3         ,i4

    stack record wrkVars
        remainingChars  ,d1
        b64CharArray    ,a65
        group bits24    ,a24
            bits24_1    ,a6
            bits24_2    ,a6
            bits24_3    ,a6
            bits24_4    ,a6
        endgroup
        tmpChar         ,a1
        tmpByte         ,i1 @tmpChar
.ifdef DBLv9
    endrecord
.endc ;;DBLv9

    structure byteStruct
        oneByte ,a1
.ifdef DBLv9
    endstructure
.endc ;;DBLv9

proc

    if !(a_hdl)
        xcall exite($ERR_INVHDL)

    ;; Set up the Base 64 character array, and initialize other values
    clear wrkVars, ^i(iVars), ^m(a_hdl)
    b64CharArray = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="

    using ^datatype(1) select
    (D_TYPE_A),
    begin
        if (^passed(a_ignoreTrailing) && a_ignoreTrailing) then
            inLength = %trimz(a_input)
        else
            inLength = ^size(a_input)
        if inLength
        begin
            inHdl = %mem_proc(DM_ALLOC+DM_BLANK, inLength)
            ^m(inHdl) = a_input
        end
    end
    (),
    begin
        inHdl = ^argn(1)
        inLength = %mem_proc(DM_GETSIZE, inHdl)
    end
    endusing

    if (inLength)
    begin
        ;; Determine the length of the new memory handle which will hold our completed base 64 string
        ;; If there are remaining bits (which will be either 2 bits or 4 bits), then that will
        ;; equate to either 1 or 2 extra "Filler" characters needed at the end of the line
        setsOf3 = inLength/3
        remainingChars = inLength - (setsOf3*3)

        base64Chars = setsOf3*4
        ;; If there are remaining characters, they will be transposed into 4 base64 characters with
        ;;special "filler" alphas (the '=' sign) making up the last 1-2 characters
        if (remainingChars)
            base64Chars += 4

        ;; if inserting line breaks, add two characters for a CRLF for each 76-characters
        if (^passed(a_encoding) && a_encoding)
            lineBreaksNeeded = base64Chars/76

        outLength = base64Chars + (lineBreaksNeeded*2)

        ;; If necessary, resize the memory handle for our final Base64 string
        if (%mem_proc(DM_GETSIZE, a_hdl) < outLength)
            a_hdl = %mem_proc(DM_RESIZ+DM_BLANK, outLength, a_hdl)

        for ctr from 1 thru inLength
        begin
            tmpChar = ^m(byteStruct[ctr], inHdl)
            bits24((byteCtr*8)+1:8)=%bin(tmpByte,1)
            if ((byteCtr+=1)==3)
            begin
                ^m(byteStruct[b64ctr+=1],a_hdl) = b64CharArray(^b(bits24_1)+1:1)
                ^m(byteStruct[b64ctr+=1],a_hdl) = b64CharArray(^b(bits24_2)+1:1)
                ^m(byteStruct[b64ctr+=1],a_hdl) = b64CharArray(^b(bits24_3)+1:1)
                ^m(byteStruct[b64ctr+=1],a_hdl) = b64CharArray(^b(bits24_4)+1:1)
                ;; Insert line break (CRLF) if necessary
                if (lineBreaksNeeded)
                begin
                    if (b64LineLength+=4)==76
                    begin
                        ^m(byteStruct[b64ctr+=1],a_hdl)=%char(13)
                        ^m(byteStruct[b64ctr+=1],a_hdl)=%char(10)
                        b64LineLength = 0
                    end
                end
                byteCtr = 0
            end
        end

        if remainingChars
        begin
            xcall fill('0',bits24)
            for ctr from 1 thru remainingChars
            begin
                tmpChar = ^m(byteStruct[ctr+(setsOf3*3)], inHdl)
                bits24(((ctr-1)*8)+1:8)=%bin(tmpByte,1)
            end

            ^m(byteStruct[b64ctr+=1],a_hdl) = b64CharArray(^b(bits24_1)+1:1)
            ^m(byteStruct[b64ctr+=1],a_hdl) = b64CharArray(^b(bits24_2)+1:1)
            if (remainingChars==2) then
                ^m(byteStruct[b64ctr+=1],a_hdl) = b64CharArray(^b(bits24_3)+1:1)
            else
                ^m(byteStruct[b64ctr+=1],a_hdl) = b64CharArray(65:1)
            ^m(byteStruct[b64ctr+=1],a_hdl) = b64CharArray(65:1)
        end
    end

    using ^datatype(1) select
    (D_TYPE_A),
        inHdl = %mem_proc(DM_FREE, inHdl)
    endusing

    if ^passed(a_length)
        a_length = outLength

    xreturn
.ifdef DBLv9
endsubroutine
.else
end
.endc ;DBLv9
